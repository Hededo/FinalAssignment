#version 410 core

// Output
layout (location = 0) out vec4 color;

// Matrices we'll need
layout (std140) uniform constants
{
    mat4 mv_matrix;		
	mat4 model_matrix;												
	mat4 view_matrix;	
	mat4 proj_matrix;
	vec4 uni_color;		
	vec4 light_pos;									     		
	vec4 useUniformColor;	
	vec4 invertNormals;
	vec4 colorPercent;
};

// Input from vertex shader
in VS_OUT
{
    vec3 N;
    vec3 L;
    vec3 V;
	vec3 color;
	vec2 tc;
} fs_in;

// Material properties
uniform vec3 diffuse_albedo = vec3(0.4, 0.4, 0.4);

uniform sampler2D colorTexture;
uniform sampler2D normalTexture;

void main(void)
{
    // Normalize the incoming N, L and V vectors
    vec3 N = texture2D(normalTexture, fs_in.tc).xyz;
	N = N.xzy;
	N = normalize((N-0.5) * 2.0); //changes the scale to -1, 1
    vec3 L = normalize(fs_in.L);
    vec3 V = normalize(fs_in.V);

    // Calculate R locally
    vec3 R = reflect(-L, N);

    vec3 diffuse = max(dot(N, L), 0.0) * diffuse_albedo;

    // Write final color to the framebuffer
	color =  vec4( diffuse * texture(colorTexture, fs_in.tc).xyz, 1.0);	
}
